import { KEYBOARD_BUTTONS, CALLBACK_DATA } from './constants.js';

export function getMainKeyboard() {
  return {
    reply_markup: {
      keyboard: [
        [KEYBOARD_BUTTONS.TESTING],
        [KEYBOARD_BUTTONS.BUSINESS_ANALYTICS],
        [KEYBOARD_BUTTONS.BACKEND]
      ],
      resize_keyboard: true,
      one_time_keyboard: false,
      persistent: true
    }
  };
}

export function getDirectionActionButtons(track, showChangeDirection = true) {
  const buttons = [];
  
  // CTA –∫–Ω–æ–ø–∫–∞
  if (track === 'Backend') {
    buttons.push([{
      text: 'üìÖ –ó–∞–±—Ä–æ–Ω—é–≤–∞—Ç–∏ —ñ–Ω—Ç–µ—Ä–≤\'—é',
      callback_data: CALLBACK_DATA.BOOK_INTERVIEW
    }]);
  } else {
    buttons.push([{
      text: 'üìù –°–ø—Ä–æ–±—É–≤–∞—Ç–∏ –ø—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç–æ–≤–µ –∑–∞–≤–¥–∞–Ω–Ω—è',
      callback_data: CALLBACK_DATA.GET_TEST_TASK
    }]);
  }
  
  // –ö–Ω–æ–ø–∫–∞ "–ó–º—ñ–Ω–∏—Ç–∏ –Ω–∞–ø—Ä—è–º" - –ø–æ–∫–∞–∑—É—î–º–æ —Ç—ñ–ª—å–∫–∏ —è–∫—â–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ
  if (showChangeDirection) {
    buttons.push([{
      text: 'üîÑ –ó–º—ñ–Ω–∏—Ç–∏ –Ω–∞–ø—Ä—è–º',
      callback_data: CALLBACK_DATA.CHANGE_DIRECTION
    }]);
  }
  
  // –ö–Ω–æ–ø–∫–∞ FAQ - –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –∑–∞–≥–∞–ª—å–Ω–∏–π callback
  buttons.push([{
    text: 'üí¨ –ß–∞—Å—Ç–æ –∑–∞–ø–∏—Ç—É—é—Ç—å',
    callback_data: 'faq_' + track.toLowerCase()
  }]);
  
  return {
    reply_markup: {
      inline_keyboard: buttons
    }
  };
}