/**
 * üö® –¶–µ–Ω—Ç—Ä–∞–ª—ñ–∑–æ–≤–∞–Ω–∞ –æ–±—Ä–æ–±–∫–∞ –ø–æ–º–∏–ª–æ–∫
 * DRY –ø—Ä–∏–Ω—Ü–∏–ø: –û–¥–Ω–µ –º—ñ—Å—Ü–µ –¥–ª—è –≤—Å—ñ—î—ó –ª–æ–≥—ñ–∫–∏ –æ–±—Ä–æ–±–∫–∏ –ø–æ–º–∏–ª–æ–∫
 */

import { config } from './environment.js';

/**
 * üîê –û–±—Ä–æ–±–Ω–∏–∫ –ø–æ–º–∏–ª–æ–∫ —Ç–æ–∫–µ–Ω–∞
 */
export class TokenErrorHandler {
  /**
   * –û–±—Ä–æ–±–∫–∞ –ø–æ–º–∏–ª–æ–∫ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó
   */
  static handleAuthError(error) {
    console.error('\nüö® –ü–æ–º–∏–ª–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó –±–æ—Ç–∞:');
    
    if (error.response?.error_code === 401) {
      console.error('‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —Ç–æ–∫–µ–Ω –±–æ—Ç–∞');
      console.error('üí° –†—ñ—à–µ–Ω–Ω—è:');
      console.error('   1. –ü–µ—Ä–µ–≤—ñ—Ä —Ç–æ–∫–µ–Ω –≤ .env —Ñ–∞–π–ª—ñ');
      console.error('   2. –ü–µ—Ä–µ–∫–æ–Ω–∞–π—Å—è —â–æ —Ç–æ–∫–µ–Ω –æ—Ç—Ä–∏–º–∞–Ω–∏–π –≤—ñ–¥ @BotFather');
      console.error('   3. –¢–æ–∫–µ–Ω –º–∞—î —Ñ–æ—Ä–º–∞—Ç: 1234567890:ABCdefGHI...');
    } else if (error.response?.error_code === 404) {
      console.error('‚ùå –ë–æ—Ç –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∏–π');
      console.error('üí° –ú–æ–∂–ª–∏–≤—ñ –ø—Ä–∏—á–∏–Ω–∏:');
      console.error('   1. –¢–æ–∫–µ–Ω –∑–∞—Å—Ç–∞—Ä—ñ–ª–∏–π –∞–±–æ –≤–∏–¥–∞–ª–µ–Ω–∏–π');
      console.error('   2. –ë–æ—Ç –±—É–≤ –¥–µ–∞–∫—Ç–∏–≤–æ–≤–∞–Ω–∏–π –≤ @BotFather');
    } else {
      console.error(`‚ùå –ü–æ–º–∏–ª–∫–∞: ${error.message}`);
    }
    
    console.error('\nüìã –î–µ—Ç–∞–ª—å–Ω–∞ —ñ–Ω—Å—Ç—Ä—É–∫—Ü—ñ—è: README.md\n');
    process.exit(1);
  }

  /**
   * –û–±—Ä–æ–±–∫–∞ –º–µ—Ä–µ–∂–µ–≤–∏—Ö –ø–æ–º–∏–ª–æ–∫
   */
  static handleNetworkError(error) {
    console.error('\nüåê –ú–µ—Ä–µ–∂–µ–≤–∞ –ø–æ–º–∏–ª–∫–∞:');
    console.error(`‚ùå ${error.message}`);
    console.error('üí° –ü–µ—Ä–µ–≤—ñ—Ä —ñ–Ω—Ç–µ—Ä–Ω–µ—Ç-–∑\'—î–¥–Ω–∞–Ω–Ω—è —Ç–∞ —Å–ø—Ä–æ–±—É–π —â–µ —Ä–∞–∑\n');
    
    if (config.env.isDevelopment) {
      console.error('üîç –î–µ—Ç–∞–ª—å–Ω–∞ –ø–æ–º–∏–ª–∫–∞:', error);
    }
  }

  /**
   * –û–±—Ä–æ–±–∫–∞ –ø–æ–º–∏–ª–æ–∫ –∑–∞–ø—É—Å–∫—É
   */
  static handleStartupError(error) {
    console.error('\n‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ –∑–∞–ø—É—Å–∫—É –±–æ—Ç–∞:');
    console.error(`‚ùå ${error.message}`);
    
    if (error.code === 'EADDRINUSE') {
      console.error('üí° –ü–æ—Ä—Ç –≤–∂–µ –∑–∞–π–Ω—è—Ç–∏–π. –ó–º—ñ–Ω—ñ—Ç—å WEBHOOK_PORT –≤ .env');
    }
    
    console.error('');
    process.exit(1);
  }
}

/**
 * üîÑ –°–∏—Å—Ç–µ–º–∞ retry –¥–ª—è –Ω–µ—Å—Ç–∞–±—ñ–ª—å–Ω–∏—Ö –∑'—î–¥–Ω–∞–Ω—å
 */
export class RetryManager {
  static async withRetry(operation, maxRetries = config.app.maxRetries) {
    let lastError;
    
    for (let attempt = 1; attempt <= maxRetries; attempt++) {
      try {
        return await operation();
      } catch (error) {
        lastError = error;
        
        if (attempt === maxRetries) {
          throw error;
        }
        
        const delay = Math.min(1000 * Math.pow(2, attempt - 1), 10000); // Exponential backoff
        console.warn(`‚ö†Ô∏è –°–ø—Ä–æ–±–∞ ${attempt}/${maxRetries} –Ω–µ –≤–¥–∞–ª–∞—Å—å. –ü–æ–≤—Ç–æ—Ä —á–µ—Ä–µ–∑ ${delay}ms...`);
        
        await new Promise(resolve => setTimeout(resolve, delay));
      }
    }
    
    throw lastError;
  }
}

/**
 * üõ°Ô∏è –ì–ª–æ–±–∞–ª—å–Ω–∏–π –æ–±—Ä–æ–±–Ω–∏–∫ –Ω–µ–æ—á—ñ–∫—É–≤–∞–Ω–∏—Ö –ø–æ–º–∏–ª–æ–∫
 */
export function setupGlobalErrorHandling() {
  // –û–±—Ä–æ–±–∫–∞ –Ω–µ–ø–µ—Ä–µ—Ö–æ–ø–ª–µ–Ω–∏—Ö –ø–æ–º–∏–ª–æ–∫
  process.on('uncaughtException', (error) => {
    console.error('\nüí• –ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞:');
    console.error(error);
    console.error('\nüîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –±–æ—Ç–∞...\n');
    process.exit(1);
  });

  // –û–±—Ä–æ–±–∫–∞ –Ω–µ–ø–µ—Ä–µ—Ö–æ–ø–ª–µ–Ω–∏—Ö –ø—Ä–æ–º—ñ—Å—ñ–≤
  process.on('unhandledRejection', (reason, promise) => {
    console.error('\n‚ö†Ô∏è –ù–µ–ø–µ—Ä–µ—Ö–æ–ø–ª–µ–Ω–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–æ–º—ñ—Å–∞:', reason);
    
    if (config.env.isDevelopment) {
      console.error('üîç –ü—Ä–æ–º—ñ—Å:', promise);
    }
  });

  // Graceful shutdown
  process.on('SIGINT', () => {
    console.log('\nüëã –û—Ç—Ä–∏–º–∞–Ω–æ —Å–∏–≥–Ω–∞–ª –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è. –ó—É–ø–∏–Ω–∫–∞ –±–æ—Ç–∞...');
    process.exit(0);
  });

  process.on('SIGTERM', () => {
    console.log('\nüëã –û—Ç—Ä–∏–º–∞–Ω–æ —Å–∏–≥–Ω–∞–ª —Ç–µ—Ä–º—ñ–Ω–∞—Ü—ñ—ó. –ó—É–ø–∏–Ω–∫–∞ –±–æ—Ç–∞...');
    process.exit(0);
  });
}
