import askPhone from '../handlers/shared/askPhone.js';
import { sendWebhook } from '../utils/webhook.js';
import { AWAITING_STATES, CALLBACK_DATA, KEYBOARD_BUTTONS } from '../utils/constants.js';

function canProceed(ctx) {
  return ctx.session.name && ctx.session.phone && ctx.session.tags?.track;
}

function showMainMenu(ctx) {
  return ctx.reply(
    `‚úÖ –†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è —É—Å–ø—ñ—à–Ω–∞.\n\n–û–±–µ—Ä–∏ –Ω–∞–ø—Ä—è–º, —â–æ —Ç–æ–±—ñ —Ü—ñ–∫–∞–≤–∏–π üëá`,
    {
      reply_markup: {
        keyboard: [
          [KEYBOARD_BUTTONS.TESTING],
          [KEYBOARD_BUTTONS.BUSINESS_ANALYTICS],
          [KEYBOARD_BUTTONS.BACKEND]
        ],
        resize_keyboard: true
      },
      parse_mode: 'HTML'
    }
  );
}

export default async function (ctx, next) {
  const awaiting = ctx.session.awaiting;
  const text = ctx.message?.text?.trim();
  const contact = ctx.message?.contact;

  // üü¢ –û–±—Ä–æ–±–∫–∞ —ñ–º–µ–Ω—ñ
  if (awaiting === AWAITING_STATES.NAME && text) {
    ctx.session.name = text;
    ctx.session.awaiting = null;

    if (!ctx.session.phone) {
      ctx.session.awaiting = AWAITING_STATES.PHONE;
      return askPhone(ctx);
    }

    // –ü—ñ—Å–ª—è –≤–≤–µ–¥–µ–Ω–Ω—è —ñ–º–µ–Ω—ñ –∑–∞–≤–∂–¥–∏ –ø–æ–∫–∞–∑—É—î–º–æ –º–µ–Ω—é –≤–∏–±–æ—Ä—É –Ω–∞–ø—Ä—è–º–∫—ñ–≤
    return showMainMenu(ctx);
  }

  // üü¢ –û–±—Ä–æ–±–∫–∞ –Ω–æ–º–µ—Ä–∞ —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É
  if (contact?.phone_number) {
    ctx.session.phone = contact.phone_number;
    ctx.session.awaiting = null;

    if (!ctx.session.name) {
      ctx.session.awaiting = AWAITING_STATES.NAME;
      return ctx.reply('–©–µ –ø–æ—Ç—Ä—ñ–±–Ω–æ –≤–≤–µ—Å—Ç–∏ —ñ–º\'—è.', { parse_mode: 'HTML' });
    }

    // –ü—ñ—Å–ª—è –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è –∫–æ–Ω—Ç–∞–∫—Ç—É –∑–∞–≤–∂–¥–∏ –ø–æ–∫–∞–∑—É—î–º–æ –º–µ–Ω—é –≤–∏–±–æ—Ä—É –Ω–∞–ø—Ä—è–º–∫—ñ–≤
    return showMainMenu(ctx);
  }

  // üü° –û–±—Ä–æ–±–∫–∞ –Ω–æ–º–µ—Ä–∞ —Ç–µ–∫—Å—Ç–æ–º
  if (awaiting === AWAITING_STATES.PHONE && text) {
    const digits = text.replace(/\D/g, '');
    if (digits.length < 10) {
      return ctx.reply(
        '‚ö†Ô∏è –¶–µ —Å—Ö–æ–∂–µ –Ω–µ –Ω–∞ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É. –í–≤–µ–¥–∏, –±—É–¥—å –ª–∞—Å–∫–∞, —É–≤–∞–∂–Ω—ñ—à–µ (–º—ñ–Ω—ñ–º—É–º 10 —Ü–∏—Ñ—Ä).',
        { parse_mode: 'HTML' }
      );
    }

    ctx.session.phone = text;
    ctx.session.awaiting = null;

    // –ü—ñ—Å–ª—è –≤–≤–µ–¥–µ–Ω–Ω—è –Ω–æ–º–µ—Ä–∞ —Ç–µ–∫—Å—Ç–æ–º –∑–∞–≤–∂–¥–∏ –ø–æ–∫–∞–∑—É—î–º–æ –º–µ–Ω—é –≤–∏–±–æ—Ä—É –Ω–∞–ø—Ä—è–º–∫—ñ–≤
    return showMainMenu(ctx);
  }

  // üîµ –û–±—Ä–æ–±–∫–∞ –∫–Ω–æ–ø–∫–∏ ¬´–Ø –≥–æ—Ç–æ–≤–∏–π –∑–¥–∞—Ç–∏ —Ç–µ—Å—Ç–æ–≤–µ¬ª
  if (
    awaiting === AWAITING_STATES.READY_TO_SUBMIT &&
    ctx.callbackQuery?.data === CALLBACK_DATA.SUBMIT_READY
  ) {
    ctx.session.awaiting = null;

    await ctx.answerCbQuery();
    await ctx.reply('‚úÖ –ú–∏ –ø–µ—Ä–µ–¥–∞–ª–∏ —Ç–≤–æ—ó –¥–∞–Ω—ñ –º–µ–Ω–µ–¥–∂–µ—Ä—É. –û—á—ñ–∫—É–π –¥–∑–≤—ñ–Ω–∫–∞.', {
      reply_markup: { remove_keyboard: true },
      parse_mode: 'HTML'
    });
    return sendWebhook(ctx);
  }

  return next();
}