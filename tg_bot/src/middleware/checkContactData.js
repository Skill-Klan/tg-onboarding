import askPhone from '../handlers/shared/askPhone.js';
import sendPDF from '../handlers/shared/sendPDF.js';
import { sendWebhook } from '../utils/webhook.js';
import { AWAITING_STATES, CALLBACK_DATA, KEYBOARD_BUTTONS } from '../utils/constants.js';

function canProceed(ctx) {
  return ctx.session.name && ctx.session.phone && ctx.session.tags?.track;
}

// –§—É–Ω–∫—Ü—ñ—è showRegistrationSuccess –≤–∏–¥–∞–ª–µ–Ω–∞, –æ—Å–∫—ñ–ª—å–∫–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –±—ñ–ª—å—à–µ –Ω–µ –ø–æ—Ç—Ä—ñ–±–Ω–µ

// –§—É–Ω–∫—Ü—ñ—è showMainMenu –≤–∏–¥–∞–ª–µ–Ω–∞, –æ—Å–∫—ñ–ª—å–∫–∏ –º–µ–Ω—é –Ω–∞–ø—Ä—è–º–∫—ñ–≤ —Ç–µ–ø–µ—Ä –ø–æ—Å—Ç—ñ–π–Ω–æ –≤—ñ–¥–æ–±—Ä–∞–∂–∞—î—Ç—å—Å—è

async function executePendingAction(ctx) {
  const pendingAction = ctx.session.pendingAction;
  if (!pendingAction) return null;

  // –û—á–∏—â–∞—î–º–æ pending action
  delete ctx.session.pendingAction;

  switch (pendingAction) {
    case 'request_pdf':
      const track = ctx.session.tags?.track;
      if (track) {
        const now = new Date();
        ctx.session.tags.start_datetime = now.toISOString();
        return sendPDF(ctx, track);
      }
      break;
    case 'book_interview':
      // –ü–æ–∫–∞–∑—É—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ —É—Å–ø—ñ—à–Ω–µ –±—Ä–æ–Ω—é–≤–∞–Ω–Ω—è
      return ctx.reply(
        `üìÖ <b>–ó–∞—è–≤–∫–∞ –Ω–∞ —ñ–Ω—Ç–µ—Ä–≤'—é –ø—Ä–∏–π–Ω—è—Ç–∞!</b>

–í–∞—à—ñ –¥–∞–Ω—ñ:
üë§ –Ü–º'—è: ${ctx.session.name}
üì± –¢–µ–ª–µ—Ñ–æ–Ω: ${ctx.session.phone}
üíª –ù–∞–ø—Ä—è–º: Backend

–ù–∞—à—ñ –º–µ–Ω–µ–¥–∂–µ—Ä–∏ –∑–≤'—è–∂—É—Ç—å—Å—è –∑ –≤–∞–º–∏ –Ω–∞–π–±–ª–∏–∂—á–∏–º —á–∞—Å–æ–º –¥–ª—è —É–∑–≥–æ–¥–∂–µ–Ω–Ω—è –∑—Ä—É—á–Ω–æ–≥–æ —á–∞—Å—É —ñ–Ω—Ç–µ—Ä–≤'—é.

–î—è–∫—É—î–º–æ –∑–∞ –≤–∞—à —ñ–Ω—Ç–µ—Ä–µ—Å –¥–æ SkillKlan! üöÄ`,
        { parse_mode: 'HTML' }
      );
      break;
  }
  return null;
}

export default async function (ctx, next) {
  const awaiting = ctx.session.awaiting;
  const text = ctx.message?.text?.trim();
  const contact = ctx.message?.contact;

  // üü¢ –û–±—Ä–æ–±–∫–∞ —ñ–º–µ–Ω—ñ
  if (awaiting === AWAITING_STATES.NAME && text) {
    ctx.session.name = text;
    ctx.session.awaiting = null;

    if (!ctx.session.phone) {
      ctx.session.awaiting = AWAITING_STATES.PHONE;
      return askPhone(ctx);
    }

    // –Ø–∫—â–æ –≤—Å—ñ –¥–∞–Ω—ñ —î, –≤–∏–∫–æ–Ω—É—î–º–æ pending action
    const pendingResult = await executePendingAction(ctx);
    if (pendingResult) return pendingResult;
    
    // –ú–µ–Ω—é –Ω–∞–ø—Ä—è–º–∫—ñ–≤ –≤–∂–µ –ø–æ—Å—Ç—ñ–π–Ω–æ –≤—ñ–¥–æ–±—Ä–∞–∂–∞—î—Ç—å—Å—è, —Ç–æ–º—É –Ω–µ –ø–æ—Ç—Ä—ñ–±–Ω–æ –¥–æ–¥–∞—Ç–∫–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
    return;
  }

  // üü¢ –û–±—Ä–æ–±–∫–∞ –Ω–æ–º–µ—Ä–∞ —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É
  if (contact?.phone_number) {
    ctx.session.phone = contact.phone_number;
    ctx.session.awaiting = null;

    if (!ctx.session.name) {
      ctx.session.awaiting = AWAITING_STATES.NAME;
      return ctx.reply('–©–µ –ø–æ—Ç—Ä—ñ–±–Ω–æ –≤–≤–µ—Å—Ç–∏ —ñ–º\'—è.', { parse_mode: 'HTML' });
    }

    // –Ø–∫—â–æ –≤—Å—ñ –¥–∞–Ω—ñ —î, –≤–∏–∫–æ–Ω—É—î–º–æ pending action
    const pendingResult = await executePendingAction(ctx);
    if (pendingResult) return pendingResult;
    
    // –ú–µ–Ω—é –Ω–∞–ø—Ä—è–º–∫—ñ–≤ –≤–∂–µ –ø–æ—Å—Ç—ñ–π–Ω–æ –≤—ñ–¥–æ–±—Ä–∞–∂–∞—î—Ç—å—Å—è, —Ç–æ–º—É –Ω–µ –ø–æ—Ç—Ä—ñ–±–Ω–æ –¥–æ–¥–∞—Ç–∫–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
    return;
  }

  // üü° –û–±—Ä–æ–±–∫–∞ –Ω–æ–º–µ—Ä–∞ —Ç–µ–∫—Å—Ç–æ–º
  if (awaiting === AWAITING_STATES.PHONE && text) {
    const digits = text.replace(/\D/g, '');
    if (digits.length < 10) {
      return ctx.reply(
        '‚ö†Ô∏è –¶–µ —Å—Ö–æ–∂–µ –Ω–µ –Ω–∞ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É. –í–≤–µ–¥–∏, –±—É–¥—å –ª–∞—Å–∫–∞, —É–≤–∞–∂–Ω—ñ—à–µ (–º—ñ–Ω—ñ–º—É–º 10 —Ü–∏—Ñ—Ä).',
        { parse_mode: 'HTML' }
      );
    }

    ctx.session.phone = text;
    ctx.session.awaiting = null;

    // –Ø–∫—â–æ –≤—Å—ñ –¥–∞–Ω—ñ —î, –≤–∏–∫–æ–Ω—É—î–º–æ pending action
    const pendingResult = await executePendingAction(ctx);
    if (pendingResult) return pendingResult;
    
    // –ú–µ–Ω—é –Ω–∞–ø—Ä—è–º–∫—ñ–≤ –≤–∂–µ –ø–æ—Å—Ç—ñ–π–Ω–æ –≤—ñ–¥–æ–±—Ä–∞–∂–∞—î—Ç—å—Å—è, —Ç–æ–º—É –Ω–µ –ø–æ—Ç—Ä—ñ–±–Ω–æ –¥–æ–¥–∞—Ç–∫–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
    return;
  }

  // üîµ –û–±—Ä–æ–±–∫–∞ –∫–Ω–æ–ø–∫–∏ ¬´–Ø –≥–æ—Ç–æ–≤–∏–π –∑–¥–∞—Ç–∏ —Ç–µ—Å—Ç–æ–≤–µ¬ª
  if (
    awaiting === AWAITING_STATES.READY_TO_SUBMIT &&
    ctx.callbackQuery?.data === CALLBACK_DATA.SUBMIT_READY
  ) {
    ctx.session.awaiting = null;

    await ctx.answerCbQuery();
    return sendWebhook(ctx);
  }

  return next();
}