import askName from './askName.js';
import askPhone from './askPhone.js';
import { setTrack } from '../../utils/tags.js';
import { getMainKeyboard } from '../../utils/keyboard.js';
import { AWAITING_STATES, KEYBOARD_BUTTONS } from '../../utils/constants.js';

/**
 * –ë–∞–∑–æ–≤–∏–π handler –¥–ª—è –≤—Å—ñ—Ö –Ω–∞–ø—Ä—è–º–∫—ñ–≤ –Ω–∞–≤—á–∞–Ω–Ω—è
 * @param {Object} ctx - –∫–æ–Ω—Ç–µ–∫—Å—Ç Telegraf
 * @param {string} track - –Ω–∞–∑–≤–∞ –Ω–∞–ø—Ä—è–º–∫—É (QA, BA, Backend)
 * @param {Object} texts - —Ç–µ–∫—Å—Ç–∏ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –Ω–∞–ø—Ä—è–º–∫—É
 */
export default async function baseHandler(ctx, track, texts) {
  // –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ –Ω–∞–ø—Ä—è–º–æ–∫
  setTrack(ctx, track);

  // –ü—Ä–∏–≤—ñ—Ç–∞–Ω–Ω—è –∑ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—î—é –ø—Ä–æ –Ω–∞–ø—Ä—è–º–æ–∫
  await ctx.reply(texts.intro, {
    ...getMainKeyboard(),
    parse_mode: 'HTML'
  });

  // –Ø–∫—â–æ —î –≤—Å—ñ –¥–∞–Ω—ñ ‚Üí –ø–æ–∫–∞–∑—É—î–º–æ –º–µ–Ω—é –≤–∏–±–æ—Ä—É –Ω–∞–ø—Ä—è–º–∫—ñ–≤
  if (ctx.session.name && ctx.session.phone) {
    ctx.session.start_DateTime = new Date().toISOString();
    
    return ctx.reply(
      `‚úÖ –†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è —É—Å–ø—ñ—à–Ω–∞.\n\n–û–±–µ—Ä–∏ –Ω–∞–ø—Ä—è–º, —â–æ —Ç–æ–±—ñ —Ü—ñ–∫–∞–≤–∏–π üëá`,
      {
        reply_markup: {
          keyboard: [
            [KEYBOARD_BUTTONS.TESTING],
            [KEYBOARD_BUTTONS.BUSINESS_ANALYTICS],
            [KEYBOARD_BUTTONS.BACKEND],
            [KEYBOARD_BUTTONS.FAQ]
          ],
          resize_keyboard: true
        },
        parse_mode: 'HTML'
      }
    );
  }

  // –Ø–∫—â–æ –±—Ä–∞–∫—É—î –¥–∞–Ω–∏—Ö ‚Üí –ø–æ–≤—ñ–¥–æ–º–ª—è—î–º–æ —ñ –∑–∞–ø–∏—Ç—É—î–º–æ
  if (texts.missingData) {
    await ctx.reply(texts.missingData, { parse_mode: 'HTML' });
  }

  // –ó–∞–ø–∏—Ç—É—î–º–æ –≤—ñ–¥—Å—É—Ç–Ω—ñ –¥–∞–Ω—ñ
  if (!ctx.session.name) {
    ctx.session.awaiting = AWAITING_STATES.NAME;
    return askName(ctx);
  }

  if (!ctx.session.phone) {
    ctx.session.awaiting = AWAITING_STATES.PHONE;
    return askPhone(ctx);
  }
} 