import { getMainKeyboard } from '../../utils/keyboard.js';

/**
 * Handler –¥–ª—è –∑–º—ñ–Ω–∏ –Ω–∞–ø—Ä—è–º—É –Ω–∞–≤—á–∞–Ω–Ω—è
 * –ü–æ–∫–∞–∑—É—î –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é –∑ —Ç—Ä—å–æ–º–∞ –Ω–∞–ø—Ä—è–º–∞–º–∏, –∑–±–µ—Ä—ñ–≥–∞—é—á–∏ –¥–∞–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
 */
export default async function changeDirection(ctx) {
  try {
    // –í—ñ–¥–ø–æ–≤—ñ–¥–∞—î–º–æ –Ω–∞ callback query
    if (ctx.callbackQuery) {
      await ctx.answerCbQuery();
    }
    
    // –í–∏–¥–∞–ª—è—î–º–æ inline –∫–Ω–æ–ø–∫–∏ –∑ –ø–æ–ø–µ—Ä–µ–¥–Ω—å–æ–≥–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
    if (ctx.callbackQuery) {
      await ctx.editMessageReplyMarkup({ inline_keyboard: [] });
    }
    
    // –ü–æ–∫–∞–∑—É—î–º–æ –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é
    await ctx.reply(
      'üîÑ –û–±–µ—Ä—ñ—Ç—å –Ω–∞–ø—Ä—è–º, —â–æ –≤–∞—Å —Ü—ñ–∫–∞–≤–∏—Ç—å:',
      {
        ...getMainKeyboard(),
        parse_mode: 'HTML'
      }
    );

    // –í—ñ–¥–ø–æ–≤—ñ–¥–∞—î–º–æ –Ω–∞ callback query
    if (ctx.callbackQuery) {
      await ctx.answerCbQuery('‚úÖ –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ—Å—å –¥–æ –≤–∏–±–æ—Ä—É –Ω–∞–ø—Ä—è–º—É');
    }
    
  } catch (error) {
    console.error('–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–º—ñ–Ω—ñ –Ω–∞–ø—Ä—è–º—É:', error);
    if (ctx.callbackQuery) {
      await ctx.answerCbQuery('‚ùå –í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.');
    }
  }
}
