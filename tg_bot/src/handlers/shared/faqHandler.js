import { CALLBACK_DATA } from '../../utils/constants.js';

/**
 * Handlers –¥–ª—è FAQ –º–æ–¥–∞–ª—å–Ω–∏—Ö –≤—ñ–∫–æ–Ω
 */

// –ü–æ–∫–∏ —â–æ –∑–∞–≥–ª—É—à–∫–∏ –¥–ª—è FAQ - –∫–æ–Ω—Ç–µ–Ω—Ç –±—É–¥–µ –¥–æ–¥–∞–Ω–æ –ø—ñ–∑–Ω—ñ—à–µ
const FAQ_TEXTS = {
  QA: `
üí¨ <b>–ß–∞—Å—Ç–æ –∑–∞–ø–∏—Ç—É—é—Ç—å –ø—Ä–æ QA (–¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è):</b>

‚ùì <i>FAQ –∫–æ–Ω—Ç–µ–Ω—Ç –±—É–¥–µ –¥–æ–¥–∞–Ω–æ –ø—ñ–∑–Ω—ñ—à–µ</i>

–Ø–∫—â–æ —É –≤–∞—Å —î –ø–∏—Ç–∞–Ω–Ω—è, –∑–≤–µ—Ä—Ç–∞–π—Ç–µ—Å—å –¥–æ –Ω–∞—à–∏—Ö –º–µ–Ω–µ–¥–∂–µ—Ä—ñ–≤.
  `.trim(),
  
  BA: `
üí¨ <b>–ß–∞—Å—Ç–æ –∑–∞–ø–∏—Ç—É—é—Ç—å –ø—Ä–æ BA (–ë—ñ–∑–Ω–µ—Å –∞–Ω–∞–ª—ñ—Ç–∏–∫–∞):</b>

‚ùì <i>FAQ –∫–æ–Ω—Ç–µ–Ω—Ç –±—É–¥–µ –¥–æ–¥–∞–Ω–æ –ø—ñ–∑–Ω—ñ—à–µ</i>

–Ø–∫—â–æ —É –≤–∞—Å —î –ø–∏—Ç–∞–Ω–Ω—è, –∑–≤–µ—Ä—Ç–∞–π—Ç–µ—Å—å –¥–æ –Ω–∞—à–∏—Ö –º–µ–Ω–µ–¥–∂–µ—Ä—ñ–≤.
  `.trim(),
  
  Backend: `
üí¨ <b>–ß–∞—Å—Ç–æ –∑–∞–ø–∏—Ç—É—é—Ç—å –ø—Ä–æ Backend:</b>

‚ùì <i>FAQ –∫–æ–Ω—Ç–µ–Ω—Ç –±—É–¥–µ –¥–æ–¥–∞–Ω–æ –ø—ñ–∑–Ω—ñ—à–µ</i>

–Ø–∫—â–æ —É –≤–∞—Å —î –ø–∏—Ç–∞–Ω–Ω—è, –∑–≤–µ—Ä—Ç–∞–π—Ç–µ—Å—å –¥–æ –Ω–∞—à–∏—Ö –º–µ–Ω–µ–¥–∂–µ—Ä—ñ–≤.
  `.trim()
};

export async function faqQA(ctx) {
  try {
    await ctx.reply(FAQ_TEXTS.QA, { 
      parse_mode: 'HTML',
              reply_markup: {
        inline_keyboard: [[
          { text: '‚úï –ó–∞–∫—Ä–∏—Ç–∏', callback_data: CALLBACK_DATA.CLOSE_FAQ }
        ]]
      }
    });
    await ctx.answerCbQuery();
  } catch (error) {
    console.error('–ü–æ–º–∏–ª–∫–∞ FAQ QA:', error);
    await ctx.answerCbQuery('‚ùå –í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞');
  }
}

export async function faqBA(ctx) {
  try {
    await ctx.reply(FAQ_TEXTS.BA, { 
      parse_mode: 'HTML',
              reply_markup: {
        inline_keyboard: [[
          { text: '‚úï –ó–∞–∫—Ä–∏—Ç–∏', callback_data: CALLBACK_DATA.CLOSE_FAQ }
        ]]
      }
    });
    await ctx.answerCbQuery();
  } catch (error) {
    console.error('–ü–æ–º–∏–ª–∫–∞ FAQ BA:', error);
    await ctx.answerCbQuery('‚ùå –í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞');
  }
}

export async function faqBackend(ctx) {
  try {
    await ctx.reply(FAQ_TEXTS.Backend, { 
      parse_mode: 'HTML',
              reply_markup: {
        inline_keyboard: [[
          { text: '‚úï –ó–∞–∫—Ä–∏—Ç–∏', callback_data: CALLBACK_DATA.CLOSE_FAQ }
        ]]
      }
    });
    await ctx.answerCbQuery();
  } catch (error) {
    console.error('–ü–æ–º–∏–ª–∫–∞ FAQ Backend:', error);
    await ctx.answerCbQuery('‚ùå –í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞');
  }
}

export async function closeFaq(ctx) {
  try {
    await ctx.deleteMessage();
    await ctx.answerCbQuery('‚úÖ –ó–∞–∫—Ä–∏—Ç–æ');
  } catch (error) {
    console.error('–ü–æ–º–∏–ª–∫–∞ –∑–∞–∫—Ä–∏—Ç—Ç—è FAQ:', error);
    await ctx.answerCbQuery();
  }
}
