import { Telegraf, session } from 'telegraf';

// üîß –¶–µ–Ω—Ç—Ä–∞–ª—ñ–∑–æ–≤–∞–Ω–∞ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è –∑ –≤–∞–ª—ñ–¥–∞—Ü—ñ—î—é —Ç–æ–∫–µ–Ω–∞
import { BOT_TOKEN, config, logEnvironmentInfo } from './config/environment.js';
import { 
  TokenErrorHandler, 
  RetryManager, 
  setupGlobalErrorHandling 
} from './config/errorHandler.js';

// Handlers
import startHandler from './handlers/startHandler.js';
import qaHandler from './handlers/qa/qaHandler.js';
import baHandler from './handlers/ba/baHandler.js';
import backendHandler from './handlers/backend/backendHandler.js';
import checkContactData from './middleware/checkContactData.js';
import requestPDF from './handlers/shared/requestPDF.js';
import changeDirection from './handlers/shared/changeDirection.js';
import bookInterview from './handlers/shared/bookInterview.js';
import faqHandler from './handlers/shared/faqHandler.js';

// üõ°Ô∏è –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –≥–ª–æ–±–∞–ª—å–Ω–æ—ó –æ–±—Ä–æ–±–∫–∏ –ø–æ–º–∏–ª–æ–∫
setupGlobalErrorHandling();

// ü§ñ –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –±–æ—Ç–∞ –∑ –±–µ–∑–ø–µ—á–Ω–∏–º —Ç–æ–∫–µ–Ω–æ–º
const bot = new Telegraf(BOT_TOKEN);

// –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è —Å–µ—Å—ñ—ó
bot.use(session({ defaultSession: () => ({ tags: {} }) }));

// –ö–æ–º–∞–Ω–¥–∞ /start
bot.start(startHandler);

// –û—Å–Ω–æ–≤–Ω—ñ –Ω–∞–ø—Ä—è–º–∏
bot.hears('–¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è', qaHandler);
bot.hears('–ë—ñ–∑–Ω–µ—Å –∞–Ω–∞–ª—ñ—Ç–∏–∫–∞', baHandler);
bot.hears('Backend', backendHandler);

bot.on('text', checkContactData);
bot.on('callback_query', checkContactData);
bot.on('contact', checkContactData);

// Callback actions
bot.action('get_test_task', requestPDF);
bot.action('change_direction', changeDirection);
bot.action('book_interview', bookInterview);

// FAQ actions
bot.action(/^faq_(qa|ba|backend)$/, faqHandler);
bot.action('faq_general', faqHandler);

// üöÄ –ë–µ–∑–ø–µ—á–Ω–∏–π –∑–∞–ø—É—Å–∫ –±–æ—Ç–∞ –∑ –æ–±—Ä–æ–±–∫–æ—é –ø–æ–º–∏–ª–æ–∫
async function startBot() {
  try {
    // –ü–æ–∫–∞–∑—É—î–º–æ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—é
    logEnvironmentInfo();
    
    // –ó–∞–ø—É—Å–∫–∞—î–º–æ –±–æ—Ç–∞ –∑ retry –º–µ—Ö–∞–Ω—ñ–∑–º–æ–º
    await RetryManager.withRetry(async () => {
      if (config.webhook.enabled) {
        // –ü—Ä–æ–¥–∞–∫—à–Ω —Ä–µ–∂–∏–º –∑ webhook
        await bot.launch({
          webhook: {
            domain: config.webhook.url,
            port: config.webhook.port
          }
        });
        console.log(`üåê –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω–æ –∑ webhook: ${config.webhook.url}:${config.webhook.port}`);
      } else {
        // –†–µ–∂–∏–º —Ä–æ–∑—Ä–æ–±–∫–∏ –∑ polling
        await bot.launch();
        console.log('ü§ñ SkillKlan –±–æ—Ç –∑–∞–ø—É—â–µ–Ω–æ (polling mode)');
      }
    });

    console.log('‚úÖ –ë–æ—Ç —É—Å–ø—ñ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω–æ —Ç–∞ –≥–æ—Ç–æ–≤–∏–π –¥–æ —Ä–æ–±–æ—Ç–∏!\n');
    
  } catch (error) {
    // –û–±—Ä–æ–±–∫–∞ —Ä—ñ–∑–Ω–∏—Ö —Ç–∏–ø—ñ–≤ –ø–æ–º–∏–ª–æ–∫
    if (error.response?.error_code === 401) {
      TokenErrorHandler.handleAuthError(error);
    } else if (error.code === 'ENOTFOUND' || error.code === 'ECONNREFUSED') {
      TokenErrorHandler.handleNetworkError(error);
    } else {
      TokenErrorHandler.handleStartupError(error);
    }
  }
}

// –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
startBot();