#!/bin/bash

# üöÄ –õ–æ–∫–∞–ª—å–Ω–∏–π —Å–∫—Ä–∏–ø—Ç –¥–µ–ø–ª–æ—é –¥–ª—è —à–≤–∏–¥–∫–æ–≥–æ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è
# –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ —Ü–µ–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –¥–µ–ø–ª–æ—é –±–µ–∑ GitHub Actions

set -e  # –ó—É–ø–∏–Ω–∏—Ç–∏ –ø—Ä–∏ –ø–æ–º–∏–ª—Ü—ñ

# –ö–æ–ª—å–æ—Ä–∏ –¥–ª—è –≤–∏–≤–æ–¥—É
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# –ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è (–≤—ñ–¥—Ä–µ–¥–∞–≥—É–π—Ç–µ –ø—ñ–¥ —Å–≤–æ—ó –ø–æ—Ç—Ä–µ–±–∏)
SERVER_HOST="${DEPLOY_HOST:-localhost}"
SERVER_USER="${DEPLOY_USER:-$USER}"
DEPLOY_PATH="${DEPLOY_PATH:-/home/roman/apps/tg-onboarding}"
BOT_TOKEN="${BOT_TOKEN:-}"

# –§—É–Ω–∫—Ü—ñ—ó –¥–ª—è –≤–∏–≤–æ–¥—É
log_info() {
    echo -e "${BLUE}‚ÑπÔ∏è  $1${NC}"
}

log_success() {
    echo -e "${GREEN}‚úÖ $1${NC}"
}

log_warning() {
    echo -e "${YELLOW}‚ö†Ô∏è  $1${NC}"
}

log_error() {
    echo -e "${RED}‚ùå $1${NC}"
}

# –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∑–º—ñ–Ω–Ω–∏—Ö —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞
check_requirements() {
    log_info "–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –≤–∏–º–æ–≥..."
    
    if [ -z "$BOT_TOKEN" ]; then
        log_error "BOT_TOKEN –Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–π!"
        log_info "–í—Å—Ç–∞–Ω–æ–≤—ñ—Ç—å: export BOT_TOKEN='–≤–∞—à_—Ç–æ–∫–µ–Ω'"
        exit 1
    fi
    
    if ! command -v ssh &> /dev/null; then
        log_error "SSH –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ!"
        exit 1
    fi
    
    log_success "–í—Å—ñ –≤–∏–º–æ–≥–∏ –≤–∏–∫–æ–Ω–∞–Ω—ñ"
}

# –î–µ–ø–ª–æ–π –Ω–∞ –ª–æ–∫–∞–ª—å–Ω–∏–π —Å–µ—Ä–≤–µ—Ä
deploy_local() {
    log_info "–î–µ–ø–ª–æ–π –Ω–∞ –ª–æ–∫–∞–ª—å–Ω–∏–π —Å–µ—Ä–≤–µ—Ä..."
    
    # –°—Ç–≤–æ—Ä–∏—Ç–∏ –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—é —è–∫—â–æ –Ω–µ —ñ—Å–Ω—É—î
    mkdir -p "$DEPLOY_PATH"
    cd "$DEPLOY_PATH"
    
    # –ö–ª–æ–Ω—É–≤–∞—Ç–∏ –∞–±–æ –æ–Ω–æ–≤–∏—Ç–∏ –∫–æ–¥
    if [ -d ".git" ]; then
        log_info "–û–Ω–æ–≤–ª–µ–Ω–Ω—è —ñ—Å–Ω—É—é—á–æ–≥–æ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä—ñ—é..."
        git pull origin main
    else
        log_info "–ö–ª–æ–Ω—É–≤–∞–Ω–Ω—è —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä—ñ—é..."
        git clone https://github.com/Skill-Klan/tg-onboarding.git .
    fi
    
    # –ü–µ—Ä–µ–π—Ç–∏ –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—é –±–æ—Ç–∞
    cd tg_bot
    
    # –í—Å—Ç–∞–Ω–æ–≤–∏—Ç–∏ –∑–∞–ª–µ–∂–Ω–æ—Å—Ç—ñ
    log_info "–í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è –∑–∞–ª–µ–∂–Ω–æ—Å—Ç–µ–π..."
    npm ci --only=production
    
    # –°—Ç–≤–æ—Ä–∏—Ç–∏ .env —Ñ–∞–π–ª
    log_info "–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞..."
    cat > .env << EOF
BOT_TOKEN=$BOT_TOKEN
NODE_ENV=production
LOG_LEVEL=info
EOF
    
    # –í–∞–ª—ñ–¥–∞—Ü—ñ—è –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó
    log_info "–í–∞–ª—ñ–¥–∞—Ü—ñ—è –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó..."
    npm run validate
    
    # –ó—É–ø–∏–Ω–∏—Ç–∏ —Å—Ç–∞—Ä–∏–π –ø—Ä–æ—Ü–µ—Å
    log_info "–ó—É–ø–∏–Ω–∫–∞ —Å—Ç–∞—Ä–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—É..."
    pkill -f "node.*index.mjs" || log_warning "–°—Ç–∞—Ä–∏–π –ø—Ä–æ—Ü–µ—Å –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∏–π"
    
    # –ó–∞–ø—É—Å—Ç–∏—Ç–∏ –Ω–æ–≤–∏–π –ø—Ä–æ—Ü–µ—Å
    log_info "–ó–∞–ø—É—Å–∫ –Ω–æ–≤–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—É..."
    nohup npm start > ../bot.log 2>&1 &
    BOT_PID=$!
    
    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∑–∞–ø—É—Å–∫—É
    sleep 3
    if ps -p $BOT_PID > /dev/null; then
        log_success "–ë–æ—Ç —É—Å–ø—ñ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω–∏–π (PID: $BOT_PID)"
    else
        log_error "–ü–æ–º–∏–ª–∫–∞ –∑–∞–ø—É—Å–∫—É –±–æ—Ç–∞"
        log_info "–û—Å—Ç–∞–Ω–Ω—ñ –ª–æ–≥–∏:"
        tail -10 ../bot.log
        exit 1
    fi
}

# –î–µ–ø–ª–æ–π –Ω–∞ –≤—ñ–¥–¥–∞–ª–µ–Ω–∏–π —Å–µ—Ä–≤–µ—Ä
deploy_remote() {
    log_info "–î–µ–ø–ª–æ–π –Ω–∞ –≤—ñ–¥–¥–∞–ª–µ–Ω–∏–π —Å–µ—Ä–≤–µ—Ä $SERVER_USER@$SERVER_HOST..."
    
    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ SSH –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è
    if ! ssh -o ConnectTimeout=5 "$SERVER_USER@$SERVER_HOST" "echo 'SSH OK'"; then
        log_error "–ù–µ –≤–¥–∞—î—Ç—å—Å—è –ø—ñ–¥–∫–ª—é—á–∏—Ç–∏—Å—è –¥–æ —Å–µ—Ä–≤–µ—Ä–∞"
        exit 1
    fi
    
    # –í–∏–∫–æ–Ω–∞–Ω–Ω—è –¥–µ–ø–ª–æ—é –Ω–∞ —Å–µ—Ä–≤–µ—Ä—ñ
    ssh "$SERVER_USER@$SERVER_HOST" << REMOTE_SCRIPT
        set -e
        
        echo "üìÅ –ü–µ—Ä–µ—Ö—ñ–¥ –¥–æ –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—ó –¥–µ–ø–ª–æ—é..."
        mkdir -p "$DEPLOY_PATH"
        cd "$DEPLOY_PATH"
        
        echo "üì• –û–Ω–æ–≤–ª–µ–Ω–Ω—è –∫–æ–¥—É..."
        if [ -d ".git" ]; then
            git pull origin main
        else
            git clone https://github.com/Skill-Klan/tg-onboarding.git .
        fi
        
        echo "üì¶ –í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è –∑–∞–ª–µ–∂–Ω–æ—Å—Ç–µ–π..."
        cd tg_bot
        npm ci --only=production
        
        echo "üîß –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞..."
        echo "BOT_TOKEN=$BOT_TOKEN" > .env
        echo "NODE_ENV=production" >> .env
        echo "LOG_LEVEL=info" >> .env
        
        echo "‚úÖ –í–∞–ª—ñ–¥–∞—Ü—ñ—è..."
        npm run validate
        
        echo "üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –±–æ—Ç–∞..."
        pkill -f "node.*index.mjs" || echo "–°—Ç–∞—Ä–∏–π –ø—Ä–æ—Ü–µ—Å –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∏–π"
        nohup npm start > ../bot.log 2>&1 &
        
        echo "‚úÖ –î–µ–ø–ª–æ–π –∑–∞–≤–µ—Ä—à–µ–Ω–æ!"
REMOTE_SCRIPT
    
    log_success "–í—ñ–¥–¥–∞–ª–µ–Ω–∏–π –¥–µ–ø–ª–æ–π –∑–∞–≤–µ—Ä—à–µ–Ω–æ!"
}

# –ü–æ–∫–∞–∑ –ª–æ–≥—ñ–≤
show_logs() {
    if [ "$SERVER_HOST" = "localhost" ]; then
        tail -f "$DEPLOY_PATH/bot.log"
    else
        ssh "$SERVER_USER@$SERVER_HOST" "tail -f $DEPLOY_PATH/bot.log"
    fi
}

# –ü–æ–∫–∞–∑ —Å—Ç–∞—Ç—É—Å—É
show_status() {
    log_info "–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å—É –±–æ—Ç–∞..."
    
    if [ "$SERVER_HOST" = "localhost" ]; then
        if pgrep -f "node.*index.mjs" > /dev/null; then
            log_success "–ë–æ—Ç –ø—Ä–∞—Ü—é—î"
            ps aux | grep "node.*index.mjs" | grep -v grep
        else
            log_warning "–ë–æ—Ç –Ω–µ –ø—Ä–∞—Ü—é—î"
        fi
    else
        ssh "$SERVER_USER@$SERVER_HOST" << 'REMOTE_STATUS'
            if pgrep -f "node.*index.mjs" > /dev/null; then
                echo "‚úÖ –ë–æ—Ç –ø—Ä–∞—Ü—é—î"
                ps aux | grep "node.*index.mjs" | grep -v grep
            else
                echo "‚ö†Ô∏è –ë–æ—Ç –Ω–µ –ø—Ä–∞—Ü—é—î"
            fi
REMOTE_STATUS
    fi
}

# –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é
case "${1:-deploy}" in
    "deploy")
        check_requirements
        if [ "$SERVER_HOST" = "localhost" ]; then
            deploy_local
        else
            deploy_remote
        fi
        ;;
    "logs")
        show_logs
        ;;
    "status")
        show_status
        ;;
    "help")
        echo "–í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è: $0 [–∫–æ–º–∞–Ω–¥–∞]"
        echo ""
        echo "–ö–æ–º–∞–Ω–¥–∏:"
        echo "  deploy  - –î–µ–ø–ª–æ–π –±–æ—Ç–∞ (–∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º)"
        echo "  logs    - –ü–æ–∫–∞–∑–∞—Ç–∏ –ª–æ–≥–∏ –±–æ—Ç–∞"
        echo "  status  - –ü–æ–∫–∞–∑–∞—Ç–∏ —Å—Ç–∞—Ç—É—Å –±–æ—Ç–∞"
        echo "  help    - –ü–æ–∫–∞–∑–∞—Ç–∏ —Ü—é –¥–æ–≤—ñ–¥–∫—É"
        echo ""
        echo "–ó–º—ñ–Ω–Ω—ñ —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞:"
        echo "  BOT_TOKEN    - –¢–æ–∫–µ–Ω Telegram –±–æ—Ç–∞ (–æ–±–æ–≤'—è–∑–∫–æ–≤–æ)"
        echo "  DEPLOY_HOST  - –•–æ—Å—Ç —Å–µ—Ä–≤–µ—Ä–∞ (–∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º: localhost)"
        echo "  DEPLOY_USER  - –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–∞ —Å–µ—Ä–≤–µ—Ä—ñ (–∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º: \$USER)"
        echo "  DEPLOY_PATH  - –®–ª—è—Ö –¥–µ–ø–ª–æ—é (–∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º: /home/\$USER/apps/tg-onboarding)"
        ;;
    *)
        log_error "–ù–µ–≤—ñ–¥–æ–º–∞ –∫–æ–º–∞–Ω–¥–∞: $1"
        log_info "–í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ: $0 help"
        exit 1
        ;;
esac
