/**
 * –û—Å–Ω–æ–≤–Ω–∏–π —Ñ–∞–π–ª –¥–æ–¥–∞—Ç–∫—É FAQ
 * –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î –≤—Å—ñ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∏ —Ç–∞ –∫–µ—Ä—É—î –∑–∞–≥–∞–ª—å–Ω–æ—é –ª–æ–≥—ñ–∫–æ—é
 */
class FAQApp {
    constructor() {
        this.dataLoader = null;
        this.questionComponent = null;
        this.searchComponent = null;
        this.searchEngine = null;
        this.searchController = null;
        this.categoryComponents = [];
        this.container = null;
        this.isInitialized = false;
        this.currentState = {
            openCategories: new Set(),
            openQuestions: new Set()
        };
    }

    /**
     * –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î –¥–æ–¥–∞—Ç–æ–∫
     */
    async init() {
        try {
            // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ DOM –≥–æ—Ç–æ–≤–∏–π
            if (document.readyState === 'loading') {
                document.addEventListener('DOMContentLoaded', () => this.initApp());
            } else {
                this.initApp();
            }
        } catch (error) {
            console.error('–ü–æ–º–∏–ª–∫–∞ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó –¥–æ–¥–∞—Ç–∫—É:', error);
            this.showError('–ü–æ–º–∏–ª–∫–∞ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó –¥–æ–¥–∞—Ç–∫—É');
        }
    }

    /**
     * –û—Å–Ω–æ–≤–Ω–∞ –ª–æ–≥—ñ–∫–∞ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó
     */
    async initApp() {
        try {
            // –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∏
            this.initializeComponents();
            
            // –ó–Ω–∞—Ö–æ–¥–∏–º–æ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
            this.container = document.getElementById('faq-container');
            if (!this.container) {
                throw new Error('–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä FAQ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ');
            }

            // –ü–æ–∫–∞–∑—É—î–º–æ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è
            this.showLoading();

            // –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –¥–∞–Ω—ñ
            await this.loadData();

            // –†–µ–Ω–¥–µ—Ä–∏–º–æ FAQ
            this.renderFAQ();

            // –í—ñ–¥–Ω–æ–≤–ª—é—î–º–æ —Å—Ç–∞–Ω (—è–∫—â–æ —î)
            this.restoreState();

            // –î–æ–¥–∞—î–º–æ –≥–ª–æ–±–∞–ª—å–Ω—ñ –æ–±—Ä–æ–±–Ω–∏–∫–∏ –ø–æ–¥—ñ–π
            this.addGlobalEventListeners();

            this.isInitialized = true;
            console.log('FAQ –¥–æ–¥–∞—Ç–æ–∫ —É—Å–ø—ñ—à–Ω–æ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ');

        } catch (error) {
            console.error('–ü–æ–º–∏–ª–∫–∞ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó:', error);
            this.showError('–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è FAQ');
        }
    }

    /**
     * –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∏
     */
    initializeComponents() {
        this.dataLoader = new DataLoader();
        this.questionComponent = new QuestionComponent();
        this.searchComponent = new SearchComponent();
        this.searchEngine = new SearchEngine();
        this.searchController = new SearchController(this.searchEngine, this);
    }

    /**
     * –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î –¥–∞–Ω—ñ FAQ
     */
    async loadData() {
        try {
            await this.dataLoader.loadData();
        } catch (error) {
            throw new Error(`–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö: ${error.message}`);
        }
    }

    /**
     * –†–µ–Ω–¥–µ—Ä–∏—Ç—å FAQ –Ω–∞ —Å—Ç–æ—Ä—ñ–Ω—Ü—ñ
     */
    renderFAQ() {
        try {
            // –û—á–∏—â–∞—î–º–æ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
            this.container.innerHTML = '';

            // –û—Ç—Ä–∏–º—É—î–º–æ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó
            const categories = this.dataLoader.getCategories();

            // –°—Ç–≤–æ—Ä—é—î–º–æ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∏ –∫–∞—Ç–µ–≥–æ—Ä—ñ–π
            this.categoryComponents = categories.map(categoryData => {
                const categoryComponent = new CategoryComponent(categoryData, this.questionComponent);
                const categoryElement = categoryComponent.createElement();
                this.container.appendChild(categoryElement);
                return categoryComponent;
            });

            // –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∏ –ø–æ—à—É–∫—É
            this.searchComponent.init(this.dataLoader.getData());
            this.searchController.init(this.dataLoader.getData());

            // –î–æ–¥–∞—î–º–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            this.addStatistics();

        } catch (error) {
            console.error('–ü–æ–º–∏–ª–∫–∞ —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥—É FAQ:', error);
            this.showError('–ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è FAQ');
        }
    }

    /**
     * –î–æ–¥–∞—î —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É FAQ
     */
    addStatistics() {
        const statsContainer = document.createElement('div');
        statsContainer.className = 'faq-stats';
        statsContainer.style.cssText = `
            padding: 20px 30px;
            background: #f8f9fa;
            border-top: 1px solid #e9ecef;
            text-align: center;
            color: #6c757d;
            font-size: 0.9rem;
        `;

        const categoriesCount = this.dataLoader.getCategories().length;
        const totalQuestions = this.dataLoader.getCategories().reduce((total, cat) => total + cat.questions.length, 0);

        statsContainer.innerHTML = `
            <span>üìö ${categoriesCount} –∫–∞—Ç–µ–≥–æ—Ä—ñ–π</span>
            <span style="margin: 0 15px;">|</span>
            <span>‚ùì ${totalQuestions} –ø–∏—Ç–∞–Ω—å</span>
        `;

        this.container.appendChild(statsContainer);
    }

    /**
     * –ü–æ–∫–∞–∑—É—î —ñ–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è
     */
    showLoading() {
        this.container.innerHTML = '<div class="loading">–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è FAQ...</div>';
    }

    /**
     * –ü–æ–∫–∞–∑—É—î –ø–æ–º–∏–ª–∫—É
     * @param {string} message - –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –ø–æ–º–∏–ª–∫—É
     */
    showError(message) {
        this.container.innerHTML = `
            <div class="error">
                <h3>‚ùå –ü–æ–º–∏–ª–∫–∞</h3>
                <p>${message}</p>
                <button onclick="location.reload()" style="
                    margin-top: 15px;
                    padding: 10px 20px;
                    background: #dc3545;
                    color: white;
                    border: none;
                    border-radius: 5px;
                    cursor: pointer;
                ">–°–ø—Ä–æ–±—É–≤–∞—Ç–∏ —â–µ —Ä–∞–∑</button>
            </div>
        `;
    }

    /**
     * –î–æ–¥–∞—î –≥–ª–æ–±–∞–ª—å–Ω—ñ –æ–±—Ä–æ–±–Ω–∏–∫–∏ –ø–æ–¥—ñ–π
     */
    addGlobalEventListeners() {
        // –û–±—Ä–æ–±–Ω–∏–∫ –¥–ª—è –∫–ª–∞–≤—ñ–∞—Ç—É—Ä–∏
        document.addEventListener('keydown', (event) => {
            // ESC - –∑–∞–∫—Ä–∏—Ç–∏ –≤—Å—ñ –ø–∏—Ç–∞–Ω–Ω—è
            if (event.key === 'Escape') {
                this.questionComponent.closeAllQuestions();
            }
            
            // Ctrl+A - –≤—ñ–¥–∫—Ä–∏—Ç–∏ –≤—Å—ñ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó
            if (event.ctrlKey && event.key === 'a') {
                event.preventDefault();
                this.openAllCategories();
            }
            
            // Ctrl+Z - –∑–∞–∫—Ä–∏—Ç–∏ –≤—Å—ñ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó
            if (event.ctrlKey && event.key === 'z') {
                event.preventDefault();
                this.closeAllCategories();
            }
        });

        // –û–±—Ä–æ–±–Ω–∏–∫ –¥–ª—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è —Å—Ç–∞–Ω—É –ø—Ä–∏ –∑–∞–∫—Ä–∏—Ç—Ç—ñ —Å—Ç–æ—Ä—ñ–Ω–∫–∏
        window.addEventListener('beforeunload', () => {
            this.saveState();
        });

        // –û–±—Ä–æ–±–Ω–∏–∫ –¥–ª—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è —Å—Ç–∞–Ω—É –ø—Ä–∏ –∑–º—ñ–Ω—ñ –≤–∏–¥–∏–º–æ—Å—Ç—ñ
        document.addEventListener('visibilitychange', () => {
            if (document.hidden) {
                this.saveState();
            }
        });
    }

    /**
     * –í—ñ–¥–∫—Ä–∏–≤–∞—î –≤—Å—ñ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó
     */
    openAllCategories() {
        this.categoryComponents.forEach(categoryComponent => {
            if (!categoryComponent.isCategoryOpen()) {
                categoryComponent.toggleCategory();
            }
        });
    }

    /**
     * –ó–∞–∫—Ä–∏–≤–∞—î –≤—Å—ñ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó
     */
    closeAllCategories() {
        this.categoryComponents.forEach(categoryComponent => {
            if (categoryComponent.isCategoryOpen()) {
                categoryComponent.toggleCategory();
            }
        });
    }

    /**
     * –ó–±–µ—Ä—ñ–≥–∞—î –ø–æ—Ç–æ—á–Ω–∏–π —Å—Ç–∞–Ω –¥–æ–¥–∞—Ç–∫—É
     */
    saveState() {
        try {
            const state = {
                openCategories: Array.from(this.currentState.openCategories),
                openQuestions: Array.from(this.currentState.openQuestions),
                timestamp: Date.now()
            };
            
            localStorage.setItem('faq-app-state', JSON.stringify(state));
        } catch (error) {
            console.warn('–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–±–µ—Ä–µ–≥—Ç–∏ —Å—Ç–∞–Ω –¥–æ–¥–∞—Ç–∫—É:', error);
        }
    }

    /**
     * –í—ñ–¥–Ω–æ–≤–ª—é—î –∑–±–µ—Ä–µ–∂–µ–Ω–∏–π —Å—Ç–∞–Ω –¥–æ–¥–∞—Ç–∫—É
     */
    restoreState() {
        try {
            const savedState = localStorage.getItem('faq-app-state');
            if (savedState) {
                const state = JSON.parse(savedState);
                
                // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –Ω–µ –∑–∞—Å—Ç–∞—Ä—ñ–≤ —Å—Ç–∞–Ω (—Å—Ç–∞—Ä—ñ—à–µ 1 –≥–æ–¥–∏–Ω–∏)
                if (Date.now() - state.timestamp < 3600000) {
                    this.currentState.openCategories = new Set(state.openCategories);
                    this.currentState.openQuestions = new Set(state.openQuestions);
                    
                    // –í—ñ–¥–Ω–æ–≤–ª—é—î–º–æ —Å—Ç–∞–Ω –∫–∞—Ç–µ–≥–æ—Ä—ñ–π
                    this.restoreCategoriesState();
                    
                    // –í—ñ–¥–Ω–æ–≤–ª—é—î–º–æ —Å—Ç–∞–Ω –ø–∏—Ç–∞–Ω—å
                    this.restoreQuestionsState();
                }
            }
        } catch (error) {
            console.warn('–ù–µ –≤–¥–∞–ª–æ—Å—è –≤—ñ–¥–Ω–æ–≤–∏—Ç–∏ —Å—Ç–∞–Ω –¥–æ–¥–∞—Ç–∫—É:', error);
        }
    }

    /**
     * –í—ñ–¥–Ω–æ–≤–ª—é—î —Å—Ç–∞–Ω –∫–∞—Ç–µ–≥–æ—Ä—ñ–π
     */
    restoreCategoriesState() {
        this.currentState.openCategories.forEach(categoryId => {
            const categoryComponent = this.categoryComponents.find(comp => 
                comp.getCategoryData().id === categoryId
            );
            if (categoryComponent && !categoryComponent.isCategoryOpen()) {
                categoryComponent.toggleCategory();
            }
        });
    }

    /**
     * –í—ñ–¥–Ω–æ–≤–ª—é—î —Å—Ç–∞–Ω –ø–∏—Ç–∞–Ω—å
     */
    restoreQuestionsState() {
        this.currentState.openQuestions.forEach(questionId => {
            this.questionComponent.openQuestionById(questionId);
        });
    }

    /**
     * –û—Ç—Ä–∏–º—É—î —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–æ–¥–∞—Ç–∫—É
     * @returns {Object} –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–æ–¥–∞—Ç–∫—É
     */
    getAppStats() {
        return {
            categoriesCount: this.categoryComponents.length,
            openCategoriesCount: this.currentState.openCategories.size,
            openQuestionsCount: this.questionComponent.getOpenQuestionsCount(),
            isInitialized: this.isInitialized
        };
    }

    /**
     * –û—á–∏—â–∞—î –∑–±–µ—Ä–µ–∂–µ–Ω–∏–π —Å—Ç–∞–Ω
     */
    clearSavedState() {
        try {
            localStorage.removeItem('faq-app-state');
            this.currentState.openCategories.clear();
            this.currentState.openQuestions.clear();
        } catch (error) {
            console.warn('–ù–µ –≤–¥–∞–ª–æ—Å—è –æ—á–∏—Å—Ç–∏—Ç–∏ –∑–±–µ—Ä–µ–∂–µ–Ω–∏–π —Å—Ç–∞–Ω:', error);
        }
    }

    /**
     * –ó–Ω–∏—â—É—î –¥–æ–¥–∞—Ç–æ–∫ —Ç–∞ –æ—á–∏—â–∞—î —Ä–µ—Å—É—Ä—Å–∏
     */
    destroy() {
        try {
            // –ó–Ω–∏—â—É—î–º–æ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∏ –∫–∞—Ç–µ–≥–æ—Ä—ñ–π
            this.categoryComponents.forEach(component => {
                if (component.destroy) {
                    component.destroy();
                }
            });

            // –ó–Ω–∏—â—É—î–º–æ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –ø–∏—Ç–∞–Ω—å
            if (this.questionComponent && this.questionComponent.destroy) {
                this.questionComponent.destroy();
            }

            // –û—á–∏—â–∞—î–º–æ –º–∞—Å–∏–≤–∏
            this.categoryComponents = [];
            this.currentState.openCategories.clear();
            this.currentState.openQuestions.clear();

            // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ —Å—Ç–∞–Ω –ø–µ—Ä–µ–¥ –∑–Ω–∏—â–µ–Ω–Ω—è–º
            this.saveState();

            this.isInitialized = false;
            console.log('FAQ –¥–æ–¥–∞—Ç–æ–∫ –∑–Ω–∏—â–µ–Ω–æ');

        } catch (error) {
            console.error('–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–Ω–∏—â–µ–Ω–Ω—ñ –¥–æ–¥–∞—Ç–∫—É:', error);
        }
    }
}

// –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –¥–æ–¥–∞—Ç–∫—É –ø—ñ—Å–ª—è –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Å—Ç–æ—Ä—ñ–Ω–∫–∏
const faqApp = new FAQApp();

// –ì–ª–æ–±–∞–ª—å–Ω—ñ —Ñ—É–Ω–∫—Ü—ñ—ó –¥–ª—è –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è –≤ –∫–æ–Ω—Å–æ–ª—ñ –±—Ä–∞—É–∑–µ—Ä–∞
window.FAQApp = {
    openAllCategories: () => faqApp.openAllCategories(),
    closeAllCategories: () => faqApp.closeAllCategories(),
    getStats: () => faqApp.getAppStats(),
    clearState: () => faqApp.clearSavedState(),
    destroy: () => faqApp.destroy()
};

// –†–æ–±–∏–º–æ –ø–æ—Ç–æ—á–Ω–∏–π –µ–∫–∑–µ–º–ø–ª—è—Ä –¥–æ—Å—Ç—É–ø–Ω–∏–º –≥–ª–æ–±–∞–ª—å–Ω–æ –¥–ª—è SearchController
window.faqApp = faqApp;

// –ó–∞–ø—É—Å–∫ –¥–æ–¥–∞—Ç–∫—É
faqApp.init();
